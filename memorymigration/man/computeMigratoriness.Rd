% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_indices.R
\name{computeMigratoriness}
\alias{computeMigratoriness}
\title{Compute Migratoriness}
\usage{
computeMigratoriness(pop, world)
}
\arguments{
\item{pop}{One cycle of population process}

\item{world}{world object; list of 5: a population distribution across the time period in a T x X matrix,
a vector with midpoint X-values, the time points for the population as integers 1:tau,
the dx value and the tau value. Can incorporate resource attribute into the world to make a list of 6.
Set up by the getSinePop function.}
}
\value{
a list with the time of the minimal overlap and the Migratoriness 
(MI) index
}
\description{
Returns an migratoriness index of a population by comparing the overlap 
overlap of the population from two different times within the year, 
choosing those times to minimize the overlap, and reporting the 
overall overlap.
}
\examples{
# Initialize world
require(memorymigration)
dx <- 1


world.R1 <- getSinePop(tau = 100, peak.max = 40, peak.min = -40, sd = 10)
world.R1$resource <- getResource_island(world.R1, 
                                       c(t.peak = 25, t.sd = 12, x.peak = 35, x.sd = 5))

#run simulation for 12 years 

parameters <- c(epsilon = 5, alpha = 100, beta=50, kappa = 1, lambda = 20)

M <- runManyYears(world.R1, parameters = parameters, n.years = 3, 1)
plotManyRuns(M, world.R1)

#simulation runs for 3 years since that is when threshold is hit

M <- runManyYears(world.R1, Parameters = parameters, n.years = 12, 0.998)
plotYearList(M, world.R1, tau = tau)

computeCohesiveness(M[[6]], world.R1)["SC.mean"]
computeMigratoriness(M[[6]], world.R1)$overlap
computeEfficiency(M[[6]], world.R1$resource, world.R1)
computeIndices(M[[6]], world.R1$resource, world.R1)
}
\seealso{
\link{computeEfficiency}, \link{computeCohesiveness}, \link{computeIndices}
}
